#Использовать v8runner
#Использовать irac
#Использовать cmdline
#Использовать 1commands
#Использовать json
#Использовать gitrunner

Перем ОПИСАНИЕ_GIT;
Перем ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА;
Перем ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ;
Перем РежимОбновления;

#Область ИнициализацияВыполнения
Процедура ИнициализацияПеременных()
    
    Если НЕ СтруктураДанныхНастроекJSONСформирована() Тогда
        Сообщить("Не удалось сформировать настройки обновления. Проверьте, существует ли файл updatesettings.json в каталоге скрипта");
        Возврат;
    КонецЕсли;
    
    //Определим обязательные параметры для каждого вида обновления, если есть возможность их указать - предложим
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.UpdateMode) Тогда
        Сообщить("Введите режим обновления, где:
            |1 - полное обновление (блокировка и прогрузка XML),
            |2 - обновление без блокировки (с прогрузкой XML),
            |3 - обновление без прогрузки (аналог прожатия F7)");
        ВвестиСтроку(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.UpdateMode);
    КонецЕсли;
    
    РежимОбновления = РежимОбновленияИБ();
    
    //Выполняем все этапы обновления
    Если РежимОбновления.ПолноеОбновлениеБлокировка Тогда
        
        ПроверитьУказатьИмяВеткиВКонсоли();
        ПроверитьПутиФайловИнициализация();
        ПроверитьУказаниеВремениБлокировкиИБ();
        
        //Выполняем обновление без блокировки базы
    ИначеЕсли РежимОбновления.ТолькоОбновлениеXML Тогда
        
        ПроверитьУказатьИмяВеткиВКонсоли();
        ПроверитьПутиФайловИнициализация();
        
        //Выполняем только обновление базы без загрузки XML (аналог прожатия F7)
    ИначеЕсли РежимОбновления.ТолькоОбновлениеИБ Тогда
        //Проверки не требуются
    КонецЕсли;
    
КонецПроцедуры

Процедура ИнициализацияОбновленияИБ()
    
    Если РежимОбновления.ПолноеОбновлениеБлокировка Тогда
        ОбновитьЛокальныйРепозиторий();
        СформироватьXMLФайлыКонфигурации();
        ПривестиВремяБлокировкиКДате();
        ЗаблокироватьРазблокироватьБазу();
        ОбновитьБазуИзXML();
    ИначеЕсли РежимОбновления.ТолькоОбновлениеXML Тогда
        ОбновитьЛокальныйРепозиторий();
        СформироватьXMLФайлыКонфигурации();
        ОбновитьБазуИзXML();
    ИначеЕсли РежимОбновления.ТолькоОбновлениеИБ Тогда
        ОбновитьБазуИзXML();
    Иначе
        ТекстИсключения = "Указан некорректный режим обновления ИБ. Доступны только режимы 1, 2, 3.";
        ВызватьИсключение ТекстИсключения;
    КонецЕсли;
    
КонецПроцедуры
#КонецОбласти

#Область ПроверкиИнициализации
Процедура ПроверитьУказатьИмяВеткиВКонсоли()
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_GIT.BranchName) Тогда
        Консоль.ВывестиСтроку("Укажите ветку для обновления");
        ВвестиСтроку(ОПИСАНИЕ_GIT.BranchName);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПроверитьПутиФайловИнициализация()
    
    КаталогСкрипта = СтартовыйСценарий().Каталог;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.EdtProjectDir) Тогда
        ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.EdtProjectDir = КаталогСкрипта + ПолучитьРазделительПути() + "tempProject";
        Если НЕ КаталогСуществует(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.EdtProjectDir) Тогда
            СоздатьКаталог(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.EdtProjectDir);
        КонецЕсли;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir) Тогда
        ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir = КаталогСкрипта + ПолучитьРазделительПути() + "XML";
        Если НЕ КаталогСуществует(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir) Тогда
            СоздатьКаталог(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir);
        КонецЕсли;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.SRCCFolder) Тогда
        ТекстИсключения = "Не указан путь к SRCCFolder, выполнение скрипта невозможно.";
        ВызватьИсключение ТекстИсключения;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir) Тогда
        //Создаем папку в папке скрипта
        ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir = КаталогСкрипта + "\Repo";
        СоздатьКаталог(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir);
    Иначе
        Если НЕ КаталогСуществует(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir) Тогда
            СоздатьКаталог(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir);
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

Процедура ПроверитьУказаниеВремениБлокировкиИБ()
    
    Если ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.UseDateBlockTime = 1 Тогда
        
        Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate) Тогда
            Сообщить("Укажите ДАТУ начала блокировки (если нужен текущий день, то не указываем)");
            ВвестиСтроку(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate);
        КонецЕсли;
        
        Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndDate)
            И ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate) Тогда
            Сообщить("Укажите ДАТУ окончания блокировки (если нужен текущий день)");
            ВвестиСтроку(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndDate);
        КонецЕсли;
        
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime) Тогда
        Сообщить("Укажите ВРЕМЯ начала блокировки");
        ВвестиСтроку(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime);
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime) Тогда
        Сообщить("Укажите ВРЕМЯ окончания блокировки");
        ВвестиСтроку(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime);
    КонецЕсли;
    
КонецПроцедуры
#КонецОбласти

#Область ЭтапыОбновленияИБ
Процедура ОбновитьЛокальныйРепозиторий()
    
    ГитРепозиторий = Новый ГитРепозиторий;
    
    ГитРепозиторий.УстановитьРабочийКаталог(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir);
    
    ЭтоРепозиторийGIT = ГитРепозиторий.ЭтоРепозиторий();
    
    Если НЕ ЭтоРепозиторийGIT Тогда
        ГитРепозиторий.Инициализировать();
    КонецЕсли;
    
    ТаблицаВнешнихРепозиториев = ГитРепозиторий.ПолучитьСписокВнешнихРепозиториев();
    
    Если ТаблицаВнешнихРепозиториев.Найти("origin", "Имя") = Неопределено Тогда
        ГитРепозиторий.ДобавитьВнешнийРепозиторий("origin", ОПИСАНИЕ_GIT.RepoURL);
    КонецЕсли;
    
    Если НЕ ТокенУстановленУспешно() Тогда
        СообщениеИсключения = "Не удалось установить токен репозитория";
        ВызватьИсключение СообщениеИсключения;
    КонецЕсли;
    
    ГитРепозиторий.Получить("origin", ОПИСАНИЕ_GIT.BranchName);
    
    РепозиторийПолучитьВеткуУспешно = ГитРепозиторий.ПолучитьКодВозврата() = 0;
    
    Если НЕ РепозиторийПолучитьВеткуУспешно Тогда
        СообщениеИсключения = СтрШаблон("Не удалось получить изменения ветки %1", ОПИСАНИЕ_GIT.BranchName);
        ВызватьИсключение СообщениеИсключения;
    КонецЕсли;
    
    ГитРепозиторий.ПерейтиВВетку("origin/" + ОПИСАНИЕ_GIT.BranchName);
    
    ПереходВВеткуУспешно = ГитРепозиторий.ПолучитьКодВозврата() = 0;
    
    Если НЕ ПереходВВеткуУспешно Тогда
        СообщениеИсключения = СтрШаблон("Не удалось перейти в указанную ветку %1", ОПИСАНИЕ_GIT.BranchName);
        ВызватьИсключение СообщениеИсключения;
    КонецЕсли;
    
    Сообщить("Обновление репозитория произошло успешно");
    
КонецПроцедуры

Процедура СформироватьXMLФайлыКонфигурации()
    
    Если НЕ EdtCliСуществует() Тогда
        ТекстИсключения = "Не установлена компонента 1cedtcli, работа скрипта невозможна.";
        ВызватьИсключение ТекстИсключения;
    КонецЕсли;
    
    ПутьКПроектуEDT = ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.EdtProjectDir;
    ПутьКSRC = ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir + "/" + ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.SRCCFolder;
    ПутьКXML = ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir;
    
    КомандаEDTExport = Новый Команда;
    
    КомандаВыполнения = СтрШаблон("%1 -data ""%2"" -command export --project ""%3"" --configuration-files ""%4""", СтрокаВызоваEDTCLI(), ПутьКПроектуEDT, ПутьКSRC, ПутьКXML);
    
    Сообщить("Начало выгрузки из формата EDT в формат XML конфигурации " + МестноеВремя(ТекущаяУниверсальнаяДата()));
    
    КомандаEDTExport.УстановитьСтрокуЗапуска(КомандаВыполнения);
    
    КодВозврата = КомандаEDTExport.Исполнить();
    
    Если КодВозврата = 0 Тогда
        Сообщить("Окончание выгрузки из формата EDT в формат XML конфигурации " + МестноеВремя(ТекущаяУниверсальнаяДата()));
    Иначе
        Сообщить("Ошибка импорта формата EDT в формат XML платформы");
        ЗавершитьРаботу(1);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПривестиВремяБлокировкиКДате()
    
    ТекущаяДата = Формат(МестноеВремя(ТекущаяУниверсальнаяДата()), "ДФ=yyyyMMdd");
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime)
        ИЛИ НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime) Тогда
        
        ТекстИсключения = "Не указано время блокировки данных, выполнение скрипта невозможно";
        ВызватьИсключение ТекстИсключения;
        
    КонецЕсли;
    
    //Приводим к полному времени, если указано кратко (без секунд)
    Если СтрДлина(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime) = 4 Тогда
        ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime + "00";
    ИначеЕсли НЕ СтрДлина(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime) = 6 Тогда //В ином случае, если не равно 6, то значит время указано неверно
        ТекстИсключения = "Неверно заполнен параметр BlockStartDate";
        ВызватьИсключение ТекстИсключения;
    КонецЕсли;
    
    Если СтрДлина(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime) = 4 Тогда
        ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime + "00";
    ИначеЕсли НЕ СтрДлина(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime) = 6 Тогда //В ином случае, если не равно 6, то значит время указано неверно
        ТекстИсключения = "Неверно заполнен параметр BlockEndTime";
        ВызватьИсключение ТекстИсключения;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate) Тогда
        ДатаБлокировкиНачало = ТекущаяДата + ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime;
    Иначе
        ДатаБлокировкиНачало = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate + ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartTime;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndDate) Тогда
        ДатаБлокировкиОкончание = ТекущаяДата + ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime;
    Иначе
        ДатаБлокировкиОкончание = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndDate + ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndTime;
    КонецЕсли;
    
    
    ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate = Дата(ДатаБлокировкиНачало);
    ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndDate = Дата(ДатаБлокировкиОкончание);
    
КонецПроцедуры

Процедура ЗаблокироватьРазблокироватьБазу(Разблокировать = Ложь)
    
    ИмяСервера = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.ServerName + ":" + ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.RASPort;
    
    ПользовательАдминистратор = ПользовательАдминистратор();
    УправлениеКластером1С = Новый УправлениеКластером1С(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.Version, ИмяСервера);
    
    Кластер = УправлениеКластером1С.Кластеры().Список()[0];
    
    ИнформационнаяБаза = Кластер.ИнформационныеБазы().Получить(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BaseName);
    ИнформационнаяБаза.УстановитьАдминистратора(ПользовательАдминистратор.Администратор, ПользовательАдминистратор.Пароль);
    
    ПараметрыБазы = ПараметрыБлокировкиИнформационнойБазы(Разблокировать);
    
    ИнформационнаяБаза.Изменить(ПараметрыБазы);
    
КонецПроцедуры

Процедура ОбновитьБазуИзXML()
    
    УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
    УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.Version);
    
    УправлениеКонфигуратором.УстановитьКлючРазрешенияЗапуска(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.AccessToken);
    
    ПараметрыСтрокиСоединения = УправлениеКонфигуратором.ПараметрыСтрокиСоединения();
    
    Если ЗначениеЗаполнено(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.FileBaseDir)
        И РежимОбновления.ТолькоОбновлениеИБ
        ИЛИ РежимОбновления.ТолькоОбновлениеXML Тогда
        
        ПараметрыСтрокиСоединения.ПутьКФайлуБазы = ПутьКФайловойБазе();
        
    Иначе
        
        ПараметрыСервернойБазы = ПутьКСервернойБазе();
        ЗаполнитьЗначенияСвойств(ПараметрыСтрокиСоединения, ПараметрыСервернойБазы, , "ПутьКФайлуБазы");
        
    КонецЕсли;
    
    ДанныеАдминистратора = ПользовательАдминистратор();
    
    УправлениеКонфигуратором.УстановитьКонтекст(ПараметрыСтрокиСоединения, ДанныеАдминистратора.Администратор, ДанныеАдминистратора.Пароль);
    Сообщить("Начало обновления " + МестноеВремя(ТекущаяУниверсальнаяДата()));
    
    Попытка
        Если ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.FormatUpdate = "cf" Тогда
            УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайлов(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir);
        ИначеЕсли ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.FormatUpdate = "cfu" Тогда
            УправлениеКонфигуратором.ЗагрузитьРасширениеИзФайлов(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.XMLFilesDir, ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.ExtensionName);
        Иначе
            ТекстИсключения = "Неизвестный формат в параметре FormatUpdate";
            ВызватьИсключение ТекстИсключения;
        КонецЕсли;
    Исключение
        Сообщить("Не удалось загрузить XML файлы конфигурации.");
        Если РежимОбновления.ПолноеОбновлениеБлокировка Тогда
            ЗаблокироватьРазблокироватьБазу(Истина);
        КонецЕсли;
        ЗавершитьРаботу(1);
    КонецПопытки;
    
    
    Если РежимОбновления.ПолноеОбновлениеБлокировка Тогда
        ТекущееМестное = МестноеВремя(ТекущаяУниверсальнаяДата());
        ВремяБлокировки = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate;
        
        Разница = ТекущееМестное - ВремяБлокировки;
        //Используем, чтобы не было сильного рассинхрона после начала автокика при блокировке
        ДополнительноеВремяНачалаОбновления = 180;
        
        Если Разница < 0 Тогда
            ВремяОжидания = (Разница * -1000);
            Приостановить(ВремяОжидания);
        КонецЕсли;
        
        ЗавершитьВсеСеансыРаботыСПриложением();
        
    КонецЕсли;
    
    Попытка
        Если ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.FormatUpdate = "cf" Тогда
            УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных();
        Иначе
            УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных( , , , ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.ExtensionName);
        КонецЕсли;
    Исключение
        
        Сообщить("Не удалось обновить конфигурацию БД приложения.");
        Если РежимОбновления.ПолноеОбновлениеБлокировка Тогда
            ЗаблокироватьРазблокироватьБазу(Истина);
        КонецЕсли;
        ЗавершитьРаботу(1);
    КонецПопытки;
    
    Сообщить("Окончание обновления " + МестноеВремя(ТекущаяУниверсальнаяДата()));
    
    Если РежимОбновления.ПолноеОбновлениеБлокировка Тогда
        ЗаблокироватьРазблокироватьБазу(Истина);
    КонецЕсли;
    ЗавершитьРаботу(0);
    
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыФункции
Функция СтруктураДанныхНастроекJSONСформирована()
    
    ТекущийСценарий = СтартовыйСценарий();
    КаталогНастроек = ТекущийСценарий.Каталог + ПолучитьРазделительПути() + "updatesettings.json";
    
    Если НЕ ФайлНастроекСуществует(КаталогНастроек) Тогда
        Возврат Ложь;
    КонецЕсли;
    
    ДокументJSON = Новый ТекстовыйДокумент;
    ДокументJSON.Прочитать(КаталогНастроек, "utf-8");
    
    ПарсерJSON = Новый ПарсерJSON;
    
    ДанныеНастроек = ПарсерJSON.ПрочитатьJSON(ДокументJSON.ПолучитьТекст(), , , Истина);
    
    УстановитьЗначенияНастроек(ДанныеНастроек);
    
    Возврат Истина;
    
КонецФункции

Процедура УстановитьЗначенияНастроек(ДанныеНастроек)
    
    ОПИСАНИЕ_GIT = ДанныеНастроек.Git;
    ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА = ДанныеНастроек.DataBase1C;
    ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ = ДанныеНастроек.FileLocations;
    
КонецПроцедуры

Функция ФайлНастроекСуществует(КаталогНастроек)
    
    ФайлНастроек = Новый Файл(КаталогНастроек);
    
    Возврат ФайлНастроек.Существует();
    
КонецФункции



Функция ТокенУстановленУспешно()
    
    ЧастьРепозитория = СтрЗаменить(ОПИСАНИЕ_GIT.RepoURL, "https://", "");
    ЧастьТокена = СтрШаблон("https://oauth2:%1@", ОПИСАНИЕ_GIT.AccessToken);
    
    ШаблонКомандаТокена = СтрШаблон("git remote set-url origin %1%2", ЧастьТокена, ЧастьРепозитория);
    
    ТокенКоманда = Новый Команда;
    
    ТокенКоманда.УстановитьРабочийКаталог(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.RepoDir);
    
    ТокенКоманда.УстановитьСтрокуЗапуска(ШаблонКомандаТокена);
    
    КодВозврата = ТокенКоманда.Исполнить();
    
    Возврат КодВозврата = 0;
    
КонецФункции

Функция КаталогСуществует(Путь)
    
    КаталогНаДиске = Новый Файл(Путь);
    
    Возврат КаталогНаДиске.Существует();
    
КонецФункции



Функция EdtCliСуществует()
    
    КомандаEDTCLI = Новый Команда;
    
    КомандаEDTCLI.УстановитьСтрокуЗапуска(СтрокаВызоваEDTCLI());
    
    КодВозврата = КомандаEDTCLI.Исполнить();
    
    Возврат КодВозврата = 0;
    
КонецФункции

Функция СтрокаВызоваEDTCLI()
    
    Если ЗначениеЗаполнено(ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.DirEDTCLI) Тогда
        Возврат """" + ОПИСАНИЕ_РАСПОЛОЖЕНИЕФАЙЛОВ.DirEDTCLI + """";
    Иначе
        Возврат "1cedtcli";
    КонецЕсли;
    
КонецФункции



Функция ПараметрыБлокировкиИнформационнойБазы(Разблокировать)
    
    ПараметрыБазы = Новый Структура;
    
    ПараметрыБазы.Вставить("НачалоБлокировкиСеансов", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockStartDate);
    ПараметрыБазы.Вставить("ОкончаниеБлокировкиСеансов", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BlockEndDate);
    ПараметрыБазы.Вставить("СообщениеБлокировкиСеансов", "");
    ПараметрыБазы.Вставить("КодРазрешения", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.AccessToken);
    
    Если Разблокировать Тогда
        ПараметрыБазы.Вставить("БлокировкаСеансовВключена", Перечисления.СостоянияВыключателя.Выключено);
    Иначе
        ПараметрыБазы.Вставить("БлокировкаСеансовВключена", Перечисления.СостоянияВыключателя.Включено);
    КонецЕсли;
    
    Возврат ПараметрыБазы;
    
КонецФункции

//Вызываем при использовании файловой базы
Функция ПутьКФайловойБазе()
    Возврат ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.FileBaseDir;
КонецФункции

// //Вызываем при использовании серверной базы
Функция ПутьКСервернойБазе()
    
    СтруктураБазы = Новый Структура;
    
    СтруктураБазы.Вставить("Сервер", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.ServerName);
    СтруктураБазы.Вставить("Порт", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.ServerPort);
    СтруктураБазы.Вставить("ИмяБазы", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BaseName);
    
    Возврат СтруктураБазы;
    
КонецФункции

Функция ПользовательАдминистратор()
    
    Пользователь = Новый Структура();
    
    Пользователь.Вставить("Администратор", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.AdminLogin);
    Пользователь.Вставить("Пароль", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.AdminPassword);
    
    Возврат Пользователь;
    
КонецФункции

Функция РежимОбновленияИБ()
    
    РежимОбновления = Новый Структура;
    
    РежимОбновления.Вставить("ПолноеОбновлениеБлокировка", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.UpdateMode = 1);
    РежимОбновления.Вставить("ТолькоОбновлениеXML", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.UpdateMode = 2);
    РежимОбновления.Вставить("ТолькоОбновлениеИБ", ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.UpdateMode = 3);
    
    Возврат РежимОбновления;
    
КонецФункции

Процедура ЗавершитьВсеСеансыРаботыСПриложением()
    
    ИмяСервера = ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.ServerName + ":" + ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.RASPort;
    
    ПользовательАдминистратор = ПользовательАдминистратор();
    УправлениеКластером1С = Новый УправлениеКластером1С(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.Version, ИмяСервера);
    
    Кластер = УправлениеКластером1С.Кластеры().Список()[0];
    
    ИнформационнаяБаза = Кластер.ИнформационныеБазы().Получить(ОПИСАНИЕ_ИНФОРМАЦИОННАЯБАЗА.BaseName);
    ИнформационнаяБаза.УстановитьАдминистратора(ПользовательАдминистратор.Администратор, ПользовательАдминистратор.Пароль);
    
    СеансыИБ = Новый Сеансы(УправлениеКластером1С, Кластер, ИнформационнаяБаза);
    
    СеансыИБ.ОбновитьДанные(1);
    СписокСеансов = СеансыИБ.Список();
    
    СоответствиеИменПриложений = СоответствиеНаименованийПриложенийВСпискеСеансов();
    
    ПриложениеКонсольКластера = СоответствиеИменПриложений.Получить("КонсольКластера");
    
    Для Каждого ТекущийСеанс Из СписокСеансов Цикл
        
        ИмяПриложения = ТекущийСеанс.Получить("Приложение");
        
        //Указываем игнорируемые виды приложений
        Если ИмяПриложения = ПриложениеКонсольКластера Тогда
            Продолжить;
        КонецЕсли;
        
        Попытка
            ТекущийСеанс.Завершить();
        Исключение
            Продолжить; //Сеанса больше нет, идем далее
        КонецПопытки;
        
    КонецЦикла;
    
КонецПроцедуры

Функция СоответствиеНаименованийПриложенийВСпискеСеансов()
    
    СоответствиеПриложений = Новый Соответствие;
    
    СоответствиеПриложений.Вставить("Конфигуратор", "Designer");
    СоответствиеПриложений.Вставить("ТолстыйКлиент", "1CV8");
    СоответствиеПриложений.Вставить("ТонкийКлиент", "1CV8C");
    СоответствиеПриложений.Вставить("ВебКлиент", "WebClient");
    СоответствиеПриложений.Вставить("КонсольКластера", "SrvrConsole");
    СоответствиеПриложений.Вставить("ФоновоеЗадание", "BackgroundJob");
    СоответствиеПриложений.Вставить("ВнешнееСоединениеCOM", "COMConnection");
    СоответствиеПриложений.Вставить("ВебСервис", "WSConnection");
    СоответствиеПриложений.Вставить("АдминистрированиеCOM", "COMConsole");
    СоответствиеПриложений.Вставить("ПланировщикЗаданий", "JobScheduler");
    
    Возврат СоответствиеПриложений;
    
КонецФункции
#КонецОбласти

ИнициализацияПеременных();
ИнициализацияОбновленияИБ();